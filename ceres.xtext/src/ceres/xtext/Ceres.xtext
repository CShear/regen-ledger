grammar ceres.xtext.Ceres with org.eclipse.xtext.common.Terminals

generate ceres "https://regen.network/ceres"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model:
	decls+=Decl*;
	
Decl:
	ValDecl |
	FunDecl |
	Expr ';'
	;
	
ValDecl:
	name=ID (':' type=Expr)? '=' expr=Expr ';'
;

FunDecl:
	name=ID '('
	  (params+=FunParam (',' params+=FunParam)* )? 
	')'
	('[' (effects+=EffParam (',' effects+=EffParam)* )? ']')?
	 (':' type=Expr)? '{'
	   statements+=Decl*
	'}'
;

FunParam:
	name=ID (':' type=Expr)?
;

EffParam:
	name=ID
;

Expr returns Expr:
	InfixR2;

// Precedence and associativity rules are consistent with the Haskell Prelude and not C-based languages
// meaning that '|' and '&' are right associative. Custom operator precedence and associativity
// follow Ocaml rules where the rules are inherited from those of the first character in the custom operator. 

InfixR2 returns Expr:
	InfixR3 ({BinOp.left=current} op=OP2 right=InfixR2)?
;

terminal OP2: '|' OP_CHARS;

InfixR3 returns Expr:
	InfixL4 ({BinOp.left=current} op=OP3 right=InfixR3)?
;

terminal OP3: '&' OP_CHARS;

InfixL4 returns Expr:
	InfixL6 ({BinOp.left=current} op=OP4 right=InfixL6)*
;

terminal OP4: ('==' | '<' | '>') OP_CHARS;

InfixL6 returns Expr:
	InfixL7 ({BinOp.left=current} op=OP6 right=InfixL7)*;

terminal OP6: ('+' | '-') OP_CHARS;

InfixL7 returns Expr:
	Atom ({BinOp.left=current} op=OP7 right=Atom)*;

terminal OP7: ('*' | '/' | '%') OP_CHARS;

Atom returns Expr:
	Literal |
	'(' Expr ')' |
	NodeExpr |
	SetExpr |
	ListExpr |
	{VarRef} value=[ecore::EObject];
	
NodeExpr returns Expr:
	{NodeExpr} '{'
	  (bindings+=NodeBinding (',' bindings+=NodeBinding)* ','?)?
	'}'
;

NodeBinding:
	key=NodePropName (':' value=Expr)?
;

NodePropName:
	{NodePathProp} root=[ecore::EObject] ('.' path+=ID)* |
	{NodeSymProp} value=SYMBOL
;

SetExpr returns Expr:
	{SetExpr} '#{'
	  (elements+=Expr (',' elements+=Expr)* ','?)?
	'}'
;

ListExpr returns Expr:
	{ListExpr} '['
	  (elements+=Expr (',' elements+=Expr)* ','?)?
	']'
;
	
Literal:
	{SymbolLit} value=SYMBOL |
	{IntLit} value=INT |
	{StrLit} value=STRING
;

terminal OP_CHARS: ('!' | '$' | '%' | '&' | '*' | '+' | '-' | '.' | '/' | ':' | '<' | '=' | '>' | '?' | '^' | '|' | '~')*;

//terminal INTEGER: ('0'..'9')+;
//terminal STRING:
//			'"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
//			"'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
//		;
//terminal ID: ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
terminal SYMBOL: "^" ID;
# -*- mode: org; -*-

#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/readtheorg/css/htmlize.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/readtheorg/css/readtheorg.css"/>

#+HTML_HEAD: <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
#+HTML_HEAD: <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/lib/js/jquery.stickytableheaders.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/readtheorg/js/readtheorg.js"></script>

#+TITLE: Regen Network Developer Guide
#+AUTHOR: Regen Network

* Data Architecture
** Identifiers
*** Immutable documents
*** Mutable documents
*** Authorities
** Schema Registry
*** Classes
**** Required Properties
**** Optional Properties
*** Properties
**** Object Properties
**** Data Properties
*** Datatypes
*** Constraints
*** Component properties
** Documents
** History and Provenance
** Reproducable External Function Execution
   In order to allow for complex scientific algorithms to be part of the verification pipeline, an external function execution framework is specified.
*** External Function Specification
  External functions are stored in a git repository with the following conventions:
  - a configuration file at the root that specifies the schema of the input and output data of the function
  - [Nix](https://nixos.org) based dependency management. Nix manages repeatable dependency installation correctly, unlike other systems such as Docker
  - it is assumed that the code executes in a container with no network access
*** External Function References
  External functions can be referenced in protocols in a type safe manner. An important part of function references is the input query. It is assumed that external functions will require both user provided data, such as sensor logs, and public data, such as satellite or weather data, as input. While the git repositories for functions specify the input data types, the queries to retrieve that data are specified at the call site. However, it is expected that the invocation framework for each function will handle the actual aggregation of such data. For instance, an execution framework may be constructed for Amazon Web Services or Google Cloud which both host large repositories of public satellite and weather data. The execution framework would receive the input query, collect all the relevant data, and then call the function.
*** Execution Records
*** Execution Framework
* Data Access
  Sharing of data and payments
* Verification Protocols
** High level logic
   Essentially a flow chart of all the different steps that can be triggered depending on the results of individual computation steps. For instance, a protocol may start with satellite verification with the only input being the land coordinates and if that fails, a manual review of photographs of the site may be triggered. This sort of protocol would require that the submitter has photographs of the site already timestamped in the past when requesting verification.
** Submissions
*** Data Queries
** Verification Algorithms
   Automated algorithms that are run (either on-chain or by a compute provider) that yield a result that may trigger a manual inspection in the case of failure
** Manual Inspection Procedures
   This will involve some sort of form-like document that includes instructions and form fields for entering collected data. For some steps in the procedure, there may be simple boolean form inputs that indicate that the reviewer is signing off on the step being completed.
* Contracts
* Identity
* Organizations
  
